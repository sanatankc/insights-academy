---
import Button from "../components/system/Button.astro"
import Text from "../components/system/Text.astro"
import Image from "../components/system/Image.astro"

const {
  config, 
  showSlide, 
  slideImages,
  showCta = true,
  className,
  style,
  contentDirection="item-center",
  bgImageBgColor="linear-gradient(103deg, rgb(0, 13, 24) 0%, rgba(0, 13, 24, 0) 100%)"
  } = Astro.props

const bgImage = showSlide ? slideImages : config.bgImage
const previewImage = config?.previewImage
const title = config?.title
const subHeading = config?.subHeading
const topHeading = config?.topHeading
const description = config?.description
---
<div 
  class=`font-roundo w-full h-full bg-cover bg-top relative bg-black flex flex-col ${className}`
  
>
  <!-- <div class='h-[72.6px] w-full bg-black'>
  </div> -->
  <div
    class=`w-full h-full relative flex ${contentDirection}`
    style={{
      ...style,
    }}
  >
    {
      showSlide ? slideImages.map(({slide, position} : {slide: string, position: string}, i : {i: number}) => (
      <div class:list={['slideshow-item w-full h-full absolute top-0 left-0 bg-no-repeat bg-cover', i == 0 ? 'opacity-1' : 'opacity-0',`slide-${i}`]} style={{
        backgroundImage: `${bgImageBgColor}, url(${slide})`,
        transition: '1s all ease-in-out',
        backgroundPosition: position,
      }}></div>
    )) : <div class="w-full h-full absolute top-0 left-0 bg-no-repeat bg-cover" style={{
      backgroundImage: `linear-gradient(0deg, #1B2226 0%, #052B4C 63.40%, #1370A7 100%), url(${bgImage})`,
      transition: '1s all  ease-in-out',
      backgroundPosition: 'center',
    }}></div>
    }
    <!-- ... slideshow code ... -->
  
    <div class="flex p-xl  items-center text-white justify-between w-full max-sm:p-l">
      <!-- content -- first section -->
      <div class=`flex gap-l flex-col relative z-10 max-sm:mt-auto`>
        <div class="flex gap-r flex-col">
          <slot name="topHeading font-display">
            {topHeading ? <Text type="h4" class="uppercase">{topHeading}</Text> : null}
          </slot>
          <slot name="title">
            {title ? <Text type="h2" class="uppercase w-[18ch] text-yellow">{title}</Text> : null}
          </slot>
          <slot name="subHeading">
            {subHeading ? <Text type="h4" class="uppercase">{subHeading}</Text> : null}
          </slot>
        </div>
        <slot name="ctaButton">
          {showCta ? <Button>Apply Now!</Button> : null}
        </slot>
      </div>
      <slot name="description">
        {description ? <Text type="p" class="w-[37ch]">{description}</Text> : null}
      </slot>
      <slot name="previewImage">
        {previewImage ? 
          <Image src={previewImage} className="w-[300px] h-auto object-cover object-center z-[90]" /> 
          : null}
      </slot>
     
    </div>
    
  </div>
</div>

<script>
  const slideshowItems = Array.from(document.querySelectorAll<HTMLElement>('.slideshow-item'));
  let slideshowIndex = 0;
  let interval: string | number | NodeJS.Timer | undefined;
  if(slideshowItems.length !== 0) {
    function moveSlides() {
      const items = Array.from(document.querySelectorAll<HTMLElement>('.slideshow-item'));
        items.forEach((item, i) => {
        if (i === slideshowIndex) {
          item.style.opacity = '1';
          return;
        } else {
          item.style.opacity = '0'
        }
      })
      slideshowIndex = (slideshowIndex + 1) % items.length;
  }
  const init = () => {
    slideshowIndex = 0
    clearInterval(interval)
    interval = setInterval(() => {
      moveSlides()
    }, 3000)
    moveSlides()
  }
  init()


  document.addEventListener('astro:beforeload', () => init());

  
  }

  
</script>