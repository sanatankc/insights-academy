---
import Button from "./system/Button.astro"
import Text from "./system/Text.astro"
import Image from "./system/Image.astro"
import config from '../../config'
import YoutubeEmbed from "./YoutubeEmbed.astro"

const {
  showSlide, 
  slideImages,
  showCta = true,
  className,
  style,
  heroOpacity = 0.5,
  contentDirection="item-center",
  bgImageBgColor="linear-gradient(103deg, rgba(0, 13, 24, 0.7) 0%, rgba(0, 13, 24, 0) 100%)"
  } = Astro.props

const bgImage = showSlide ? slideImages : config.bgImage
const previewImage = config?.previewImage
const title = config?.title
const subHeading = config?.subHeading
console.log('config....', config)
const topHeading = config?.topHeading
const description = config?.description

const { campusName = '' } = Astro.params
const campus = config.campus
const campusConfig = campus.find(c => c.internalName === campusName)

const hasCampusSelected = !!campusConfig
// const { campusName = '' } = Astro.params


let videoId = campusName === 'kanakapura' ? 'MAf7ML6JYaA' : '7MT_Q5LIWpc'
---
<div 
  class=`font-roundo w-full h-full bg-cover bg-top relative bg-black flex flex-col ${className}`
  
>
  <div
    class=`w-full h-full relative flex ${contentDirection}`
    style={{
      ...style,
    }}
  >
    {
      showSlide ? slideImages.map(({slide, position, type, picture, mobileOnly, desktopOnly} : {slide: string, position: string, type: string, picture: boolean}, i : number) => (
        type === 'image' ? (
          picture ? (
            <picture
              class:list={[
                "slideshow-item w-full h-full absolute top-0 left-0 bg-no-repeat bg-cover",
                i === 0 ? "opacity-1" : "opacity-0",
              ]}
              style={{
                transition: "1s all ease-in-out",
                backgroundPosition: position,
              }}
            >
              {slide.map(({ src, media }) => (
                <source srcset={src} media={media} class="w-full h-full object-cover" style={{
                  objectPosition: position
                }} />
              ))}
              <img src={slide[0]} alt="slide-img" class="w-full h-full object-cover" style={{
                objectPosition: position
              }} />
            </picture>
          ) : (
            (
              <div class:list={[
                'slideshow-item w-full h-full absolute top-0 left-0 bg-no-repeat bg-cover', 
                i === 0 ? 'opacity-1' : 'opacity-0',
                `slide-${i}`
              ]} style={{
                backgroundImage: `${bgImageBgColor}, url(${slide})`,
                transition: '1s all ease-in-out',
                backgroundPosition: position,
              }}></div>
            ) 

          )
        ): (
          <div class="absolute top-0 left-0 w-full h-full">
            <video class:list={["slideshow-item absolute top-0 left-0 lazy play-on-hover w-full h-full object-cover", i === 0 ? 'opacity-1' : 'opacity-0',`slide-${i}`]} loop autoplay>
              <source data-src={'.' + slide} src={slide} type="video/mp4">
            </video>
            <div class="absolute w-full h-full" style={{
              background: 'linear-gradient(180deg, rgba(0,0,0,0.1) 0%, rgba(0,0,0, 1) 100%)',
              opacity: 0.5
            }}>
            </div>
          </div>
        )
    )) : (
      <div class="w-full h-full absolute top-0 left-0 bg-no-repeat bg-cover" style={{
        backgroundImage: `linear-gradient(0deg, #1B2226 0%, #052B4C 63.40%, #1370A7 100%), url(${bgImage})`,
        transition: '1s all  ease-in-out',
        backgroundPosition: 'center',
        // filter: 'invert'
      }}></div>
    )}

    <div class="absolute top-0 left-0 w-full h-full z-20" style={{
      background: `linear-gradient(to top, rgba(0, 13, 24, ${heroOpacity}) 0%, rgba(0, 13, 24, 0) 100%)`
    }}></div>
  
    <div class="flex p-xl  items-center text-white justify-between w-full max-sm:p-4 max-sm:pb-14 relative z-20">
      <div class={`flex gap-l flex-col relative z-10 max-sm:mt-auto`}>
        <div class="flex gap-r flex-col">
          <slot name="topHeading">
            {topHeading ? <Text type="h4" class="uppercase font-display">{topHeading}</Text> : null}
          </slot>
          <slot name="title">
            {title ? <Text type="h2" class="uppercase w-[18ch] text-yellow">{title}</Text> : null}
          </slot>
          <slot name="subHeading">
            {subHeading ? <Text type="h4" class="uppercase">{subHeading}</Text> : null}
          </slot>
        </div>
        <slot name="ctaButton">
          {showCta ? (
            hasCampusSelected ? (
              <div class="flex flex-row gap-4 max-md:flex-col">
                <a href={campusConfig.admissionLink} target="_blank">
                  <Button>Apply Now</Button>
                </a>
                <div data-video-open={videoId}>
                  <Button type="secondary">
                    Watch Video
                    <svg slot="icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path fill-rule="evenodd" clip-rule="evenodd" d="M12 24C18.6274 24 24 18.6274 24 12C24 5.37258 18.6274 0 12 0C5.37258 0 0 5.37258 0 12C0 18.6274 5.37258 24 12 24ZM13.2313 8.72996C12.9466 8.53003 12.6242 8.32321 12.2903 8.1202C11.0034 7.33764 10.36 6.94636 9.7829 7.37957C9.2058 7.81278 9.15335 8.71968 9.04846 10.5335C9.01879 11.0464 9 11.5493 9 12.0001C9 12.4508 9.01879 12.9537 9.04846 13.4666C9.15335 15.2804 9.2058 16.1873 9.7829 16.6205C10.36 17.0537 11.0034 16.6625 12.2903 15.8799C12.6242 15.6769 12.9466 15.4701 13.2313 15.2702C13.5559 15.0423 13.909 14.7688 14.2651 14.4783C15.555 13.426 16.2 12.8999 16.2 12.0001C16.2 11.1002 15.555 10.5741 14.2651 9.52182C13.909 9.23134 13.5559 8.95785 13.2313 8.72996Z" fill="#006BB3"/>
                    </svg>
                  </Button>
                </div>
              </div>
            ) : (
              <div data-modal-target='login-prompt'>
                <Button>Apply Now</Button>
              </div>
            )
          )
        : null}
        </slot>
      </div>
      <slot name="description">
        {description ? <Text type="p" class="w-[37ch]">{description}</Text> : null}
      </slot>
      <slot name="previewImage">
        {previewImage ? 
          <Image src={previewImage} className="w-[300px] h-auto object-cover object-center z-[90]" /> 
          : null}
      </slot>
     
    </div>

    <YoutubeEmbed embedId={videoId} videoId={videoId} />
    
    
  </div>
</div>

<script>
  const slideshowItems = Array.from(document.querySelectorAll<HTMLElement>('.slideshow-item'));
  let slideshowIndex = 0;
  let interval: string | number | NodeJS.Timer | undefined;
  if(slideshowItems.length !== 0) {
    function moveSlides() {
      const items = Array.from(document.querySelectorAll<HTMLElement>('.slideshow-item'));
        items.forEach((item, i) => {
        if (i === slideshowIndex) {
          if (item.tagName === 'video') {
            item.currentTime = 0;
            item.play()
          }
          item.style.opacity = '1';
          return;
        } else {
          item.style.opacity = '0'
        }
      })
      slideshowIndex = (slideshowIndex + 1) % items.length;
  }

  let texts = Array.from(document.querySelectorAll<HTMLElement>('.text'));
let counter = 0;
let interval: string | number | NodeJS.Timer | undefined;

const textArray = [
        "excellence",
        "innovation",
        "achievements",
    ]
function moveTextOneByOne(){
    texts.forEach((text, index) => {
        if(index === counter){
            text.style.opacity = '1';
            text.style.transform = 'translateY(0)';

        }else{
            text.style.opacity = '0'
            text.style.transform = 'translateY(-42px)';

        }
    })
    counter = (counter + 1) % texts.length;
}

  const init = () => {
    slideshowIndex = 0
    clearInterval(interval)
    interval = setInterval(() => {
      moveSlides()
      moveTextOneByOne()
    }, 3000)
    moveSlides()
    moveTextOneByOne()
  }

  init()
  document.addEventListener('astro:beforeload', () => init());

  
  }

  
</script>